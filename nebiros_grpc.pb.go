// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: nebiros.proto

package nebiros

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NebirosClient is the client API for Nebiros service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NebirosClient interface {
	ExecCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResponse, error)
	GetRemoteCommands(ctx context.Context, in *GetRemoteCommandOpts, opts ...grpc.CallOption) (*RemoteCommandUsageResults, error)
	CommandListener(ctx context.Context, opts ...grpc.CallOption) (Nebiros_CommandListenerClient, error)
}

type nebirosClient struct {
	cc grpc.ClientConnInterface
}

func NewNebirosClient(cc grpc.ClientConnInterface) NebirosClient {
	return &nebirosClient{cc}
}

func (c *nebirosClient) ExecCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/nebiros.Nebiros/ExecCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nebirosClient) GetRemoteCommands(ctx context.Context, in *GetRemoteCommandOpts, opts ...grpc.CallOption) (*RemoteCommandUsageResults, error) {
	out := new(RemoteCommandUsageResults)
	err := c.cc.Invoke(ctx, "/nebiros.Nebiros/GetRemoteCommands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nebirosClient) CommandListener(ctx context.Context, opts ...grpc.CallOption) (Nebiros_CommandListenerClient, error) {
	stream, err := c.cc.NewStream(ctx, &Nebiros_ServiceDesc.Streams[0], "/nebiros.Nebiros/CommandListener", opts...)
	if err != nil {
		return nil, err
	}
	x := &nebirosCommandListenerClient{stream}
	return x, nil
}

type Nebiros_CommandListenerClient interface {
	Send(*Command) error
	CloseAndRecv() (*CommandResponse, error)
	grpc.ClientStream
}

type nebirosCommandListenerClient struct {
	grpc.ClientStream
}

func (x *nebirosCommandListenerClient) Send(m *Command) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nebirosCommandListenerClient) CloseAndRecv() (*CommandResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CommandResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NebirosServer is the server API for Nebiros service.
// All implementations must embed UnimplementedNebirosServer
// for forward compatibility
type NebirosServer interface {
	ExecCommand(context.Context, *Command) (*CommandResponse, error)
	GetRemoteCommands(context.Context, *GetRemoteCommandOpts) (*RemoteCommandUsageResults, error)
	CommandListener(Nebiros_CommandListenerServer) error
	mustEmbedUnimplementedNebirosServer()
}

// UnimplementedNebirosServer must be embedded to have forward compatible implementations.
type UnimplementedNebirosServer struct {
}

func (UnimplementedNebirosServer) ExecCommand(context.Context, *Command) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecCommand not implemented")
}
func (UnimplementedNebirosServer) GetRemoteCommands(context.Context, *GetRemoteCommandOpts) (*RemoteCommandUsageResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemoteCommands not implemented")
}
func (UnimplementedNebirosServer) CommandListener(Nebiros_CommandListenerServer) error {
	return status.Errorf(codes.Unimplemented, "method CommandListener not implemented")
}
func (UnimplementedNebirosServer) mustEmbedUnimplementedNebirosServer() {}

// UnsafeNebirosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NebirosServer will
// result in compilation errors.
type UnsafeNebirosServer interface {
	mustEmbedUnimplementedNebirosServer()
}

func RegisterNebirosServer(s grpc.ServiceRegistrar, srv NebirosServer) {
	s.RegisterService(&Nebiros_ServiceDesc, srv)
}

func _Nebiros_ExecCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NebirosServer).ExecCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nebiros.Nebiros/ExecCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NebirosServer).ExecCommand(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nebiros_GetRemoteCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemoteCommandOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NebirosServer).GetRemoteCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nebiros.Nebiros/GetRemoteCommands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NebirosServer).GetRemoteCommands(ctx, req.(*GetRemoteCommandOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nebiros_CommandListener_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NebirosServer).CommandListener(&nebirosCommandListenerServer{stream})
}

type Nebiros_CommandListenerServer interface {
	SendAndClose(*CommandResponse) error
	Recv() (*Command, error)
	grpc.ServerStream
}

type nebirosCommandListenerServer struct {
	grpc.ServerStream
}

func (x *nebirosCommandListenerServer) SendAndClose(m *CommandResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nebirosCommandListenerServer) Recv() (*Command, error) {
	m := new(Command)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Nebiros_ServiceDesc is the grpc.ServiceDesc for Nebiros service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Nebiros_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nebiros.Nebiros",
	HandlerType: (*NebirosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecCommand",
			Handler:    _Nebiros_ExecCommand_Handler,
		},
		{
			MethodName: "GetRemoteCommands",
			Handler:    _Nebiros_GetRemoteCommands_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CommandListener",
			Handler:       _Nebiros_CommandListener_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "nebiros.proto",
}
